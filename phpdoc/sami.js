(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '    <ul>                <li data-name="namespace:MarkdownExtended" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended.html">MarkdownExtended</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:MarkdownExtended_API" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/API.html">API</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_API_CollectionInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/CollectionInterface.html">CollectionInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_ContentInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/ContentInterface.html">ContentInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_GamutInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/GamutInterface.html">GamutInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_KernelInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/KernelInterface.html">KernelInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_OutputFormatHelperInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/OutputFormatHelperInterface.html">OutputFormatHelperInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_OutputFormatInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/OutputFormatInterface.html">OutputFormatInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_ParserInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/ParserInterface.html">ParserInterface</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_API_TemplaterInterface" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/API/TemplaterInterface.html">TemplaterInterface</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_CommandLine" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/CommandLine.html">CommandLine</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_CommandLine_AbstractConsole" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/CommandLine/AbstractConsole.html">AbstractConsole</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_CommandLine_Console" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/CommandLine/Console.html">Console</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_CommandLine_Reminders" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/CommandLine/Reminders.html">Reminders</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_Exception" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/Exception.html">Exception</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_Exception_DomainException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Exception/DomainException.html">DomainException</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Exception_Exception" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Exception/Exception.html">Exception</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Exception_InvalidArgumentException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Exception/InvalidArgumentException.html">InvalidArgumentException</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Exception_RuntimeException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Exception/RuntimeException.html">RuntimeException</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Exception_UnexpectedValueException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Exception/UnexpectedValueException.html">UnexpectedValueException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_Grammar" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/Grammar.html">Grammar</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="namespace:MarkdownExtended_Grammar_Filter" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/Grammar/Filter.html">Filter</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_Grammar_Filter_Abbreviation" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Abbreviation.html">Abbreviation</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Anchor" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Anchor.html">Anchor</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_AutoLink" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/AutoLink.html">AutoLink</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_BlockInclusion" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/BlockInclusion.html">BlockInclusion</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_BlockQuote" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/BlockQuote.html">BlockQuote</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_CodeBlock" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/CodeBlock.html">CodeBlock</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_DefinitionList" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/DefinitionList.html">DefinitionList</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Emphasis" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Emphasis.html">Emphasis</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_FencedCodeBlock" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/FencedCodeBlock.html">FencedCodeBlock</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_HTML" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/HTML.html">HTML</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_HardBreak" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/HardBreak.html">HardBreak</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Header" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Header.html">Header</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_HorizontalRule" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/HorizontalRule.html">HorizontalRule</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Image" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Image.html">Image</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_LinkDefinition" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/LinkDefinition.html">LinkDefinition</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_ListItem" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/ListItem.html">ListItem</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Maths" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Maths.html">Maths</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_MetaData" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/MetaData.html">MetaData</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Note" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Note.html">Note</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Span" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Span.html">Span</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_Table" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/Table.html">Table</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter_TableOfContents" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter/TableOfContents.html">TableOfContents</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_Grammar_Tool" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/Grammar/Tool.html">Tool</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_Grammar_Tool_AppendEndingNewLines" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/AppendEndingNewLines.html">AppendEndingNewLines</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_Detab" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/Detab.html">Detab</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_EncodeAmpAndAngle" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/EncodeAmpAndAngle.html">EncodeAmpAndAngle</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_EncodeAttribute" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/EncodeAttribute.html">EncodeAttribute</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_ExtractAttributes" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/ExtractAttributes.html">ExtractAttributes</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_Outdent" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/Outdent.html">Outdent</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_RebuildParagraph" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/RebuildParagraph.html">RebuildParagraph</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_RemoveUtf8Marker" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/RemoveUtf8Marker.html">RemoveUtf8Marker</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_StandardizeLineEnding" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/StandardizeLineEnding.html">StandardizeLineEnding</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool_StripSpacedLines" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool/StripSpacedLines.html">StripSpacedLines</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_AbstractGamut" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/AbstractGamut.html">AbstractGamut</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Filter" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Filter.html">Filter</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Gamut" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Gamut.html">Gamut</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Grammar_Tool" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Grammar/Tool.html">Tool</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_OutputFormat" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/OutputFormat.html">OutputFormat</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_OutputFormat_AbstractOutputFormat" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/AbstractOutputFormat.html">AbstractOutputFormat</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormat_DefaultHelper" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/DefaultHelper.html">DefaultHelper</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormat_HTML" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/HTML.html">HTML</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormat_HTMLHelper" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/HTMLHelper.html">HTMLHelper</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormat_Man" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/Man.html">Man</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormat_ManHelper" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormat/ManHelper.html">ManHelper</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:MarkdownExtended_Util" >                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="MarkdownExtended/Util.html">Util</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:MarkdownExtended_Util_Compiler" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Util/Compiler.html">Compiler</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Util_MenuItemIterator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Util/MenuItemIterator.html">MenuItemIterator</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Util_RecursiveMenuIterator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="MarkdownExtended/Util/RecursiveMenuIterator.html">RecursiveMenuIterator</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:MarkdownExtended_API" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/API.html">API</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Config" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Config.html">Config</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Content" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Content.html">Content</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_ContentCollection" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/ContentCollection.html">ContentCollection</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Helper" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Helper.html">Helper</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_MarkdownExtended" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/MarkdownExtended.html">MarkdownExtended</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_OutputFormatBag" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/OutputFormatBag.html">OutputFormatBag</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Parser" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Parser.html">Parser</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Registry" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Registry.html">Registry</a>                    </div>                </li>                            <li data-name="class:MarkdownExtended_Templater" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="MarkdownExtended/Templater.html">Templater</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:markdown" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="markdown.html">markdown</a>                    </div>                    <div class="bd">                            <ul>                <li data-name="class:markdown_MarkdownExtendedParser" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="markdown/MarkdownExtendedParser.html">MarkdownExtendedParser</a>                    </div>                </li>                            <li data-name="class:markdown_MarkdownExtraParser" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="markdown/MarkdownExtraParser.html">MarkdownExtraParser</a>                    </div>                </li>                            <li data-name="class:markdown_MarkdownParser" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="markdown/MarkdownParser.html">MarkdownParser</a>                    </div>                </li>                            <li data-name="class:markdown_MarkdownParserCompatibilityInterface" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="markdown/MarkdownParserCompatibilityInterface.html">MarkdownParserCompatibilityInterface</a>                    </div>                </li>                            <li data-name="class:markdown_MultiMarkdownParser" >                    <div style="padding-left:26px" class="hd leaf">                        <a href="markdown/MultiMarkdownParser.html">MultiMarkdownParser</a>                    </div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    {"type": "Namespace", "link": "MarkdownExtended.html", "name": "MarkdownExtended", "doc": "Namespace MarkdownExtended"},{"type": "Namespace", "link": "MarkdownExtended/API.html", "name": "MarkdownExtended\\API", "doc": "Namespace MarkdownExtended\\API"},{"type": "Namespace", "link": "MarkdownExtended/CommandLine.html", "name": "MarkdownExtended\\CommandLine", "doc": "Namespace MarkdownExtended\\CommandLine"},{"type": "Namespace", "link": "MarkdownExtended/Exception.html", "name": "MarkdownExtended\\Exception", "doc": "Namespace MarkdownExtended\\Exception"},{"type": "Namespace", "link": "MarkdownExtended/Grammar.html", "name": "MarkdownExtended\\Grammar", "doc": "Namespace MarkdownExtended\\Grammar"},{"type": "Namespace", "link": "MarkdownExtended/Grammar/Filter.html", "name": "MarkdownExtended\\Grammar\\Filter", "doc": "Namespace MarkdownExtended\\Grammar\\Filter"},{"type": "Namespace", "link": "MarkdownExtended/Grammar/Tool.html", "name": "MarkdownExtended\\Grammar\\Tool", "doc": "Namespace MarkdownExtended\\Grammar\\Tool"},{"type": "Namespace", "link": "MarkdownExtended/OutputFormat.html", "name": "MarkdownExtended\\OutputFormat", "doc": "Namespace MarkdownExtended\\OutputFormat"},{"type": "Namespace", "link": "MarkdownExtended/Util.html", "name": "MarkdownExtended\\Util", "doc": "Namespace MarkdownExtended\\Util"},{"type": "Namespace", "link": "markdown.html", "name": "markdown", "doc": "Namespace markdown"},
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/CollectionInterface.html", "name": "MarkdownExtended\\API\\CollectionInterface", "doc": "&quot;Interface CollectionInterface&quot;"},
                    
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/ContentInterface.html", "name": "MarkdownExtended\\API\\ContentInterface", "doc": "&quot;Interface to implement for &lt;code&gt;MarkdownExtended\\Content&lt;\/code&gt; objects&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\ContentInterface", "fromLink": "MarkdownExtended/API/ContentInterface.html", "link": "MarkdownExtended/API/ContentInterface.html#method_getSource", "name": "MarkdownExtended\\API\\ContentInterface::getSource", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/GamutInterface.html", "name": "MarkdownExtended\\API\\GamutInterface", "doc": "&quot;Interface GamutInterface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\GamutInterface", "fromLink": "MarkdownExtended/API/GamutInterface.html", "link": "MarkdownExtended/API/GamutInterface.html#method_getDefaultMethod", "name": "MarkdownExtended\\API\\GamutInterface::getDefaultMethod", "doc": "&quot;Must return a method name&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/KernelInterface.html", "name": "MarkdownExtended\\API\\KernelInterface", "doc": "&quot;Interface that defines a \&quot;kernel\&quot; principle&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method___construct", "name": "MarkdownExtended\\API\\KernelInterface::__construct", "doc": "&quot;Initialize the registry and flush the contents stack&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_getInstance", "name": "MarkdownExtended\\API\\KernelInterface::getInstance", "doc": "&quot;Get the instance, which will be created if required&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_create", "name": "MarkdownExtended\\API\\KernelInterface::create", "doc": "&quot;Create a new singleton instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_factory", "name": "MarkdownExtended\\API\\KernelInterface::factory", "doc": "&quot;Build, retain and return a dependency instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_get", "name": "MarkdownExtended\\API\\KernelInterface::get", "doc": "&quot;Get a service from the container ; load it if absent&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_transformString", "name": "MarkdownExtended\\API\\KernelInterface::transformString", "doc": "&quot;Transform a source string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_transformSource", "name": "MarkdownExtended\\API\\KernelInterface::transformSource", "doc": "&quot;Transform a source file content&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface", "doc": "&quot;PHP Markdown Extended OutputFormat helper interface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatHelperInterface", "fromLink": "MarkdownExtended/API/OutputFormatHelperInterface.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html#method_getFullContent", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface::getFullContent", "doc": "&quot;This must return a full formatted string ready to write a well-formed document in the considered format&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatHelperInterface", "fromLink": "MarkdownExtended/API/OutputFormatHelperInterface.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html#method_getToc", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface::getToc", "doc": "&quot;This must return a full formatted table of contents in the considered format&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/OutputFormatInterface.html", "name": "MarkdownExtended\\API\\OutputFormatInterface", "doc": "&quot;PHP Markdown Extended OutputFormat interface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatInterface", "fromLink": "MarkdownExtended/API/OutputFormatInterface.html", "link": "MarkdownExtended/API/OutputFormatInterface.html#method_buildTag", "name": "MarkdownExtended\\API\\OutputFormatInterface::buildTag", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatInterface", "fromLink": "MarkdownExtended/API/OutputFormatInterface.html", "link": "MarkdownExtended/API/OutputFormatInterface.html#method_getTagString", "name": "MarkdownExtended\\API\\OutputFormatInterface::getTagString", "doc": "&quot;\n&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/ParserInterface.html", "name": "MarkdownExtended\\API\\ParserInterface", "doc": "&quot;Interface for a content parser&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\ParserInterface", "fromLink": "MarkdownExtended/API/ParserInterface.html", "link": "MarkdownExtended/API/ParserInterface.html#method___construct", "name": "MarkdownExtended\\API\\ParserInterface::__construct", "doc": "&quot;Constructor function: Initialize the parser object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\ParserInterface", "fromLink": "MarkdownExtended/API/ParserInterface.html", "link": "MarkdownExtended/API/ParserInterface.html#method_parse", "name": "MarkdownExtended\\API\\ParserInterface::parse", "doc": "&quot;Main function. Performs some preprocessing on the input text\nand pass it through the document gamut.&quot;"},
            
            {"type": "Interface", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/TemplaterInterface.html", "name": "MarkdownExtended\\API\\TemplaterInterface", "doc": "&quot;Interface TemplaterInterface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\TemplaterInterface", "fromLink": "MarkdownExtended/API/TemplaterInterface.html", "link": "MarkdownExtended/API/TemplaterInterface.html#method_getTemplate", "name": "MarkdownExtended\\API\\TemplaterInterface::getTemplate", "doc": "&quot;Get the template file path&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\TemplaterInterface", "fromLink": "MarkdownExtended/API/TemplaterInterface.html", "link": "MarkdownExtended/API/TemplaterInterface.html#method___toString", "name": "MarkdownExtended\\API\\TemplaterInterface::__toString", "doc": "&quot;Get the template content with loaded Markdown parsed content parts inserted&quot;"},
            
            {"type": "Interface", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MarkdownParserCompatibilityInterface.html", "name": "markdown\\MarkdownParserCompatibilityInterface", "doc": "&quot;Interface MarkdownParserCompatibilityInterface&quot;"},
                                                        {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_render", "name": "markdown\\MarkdownParserCompatibilityInterface::render", "doc": "&quot;Main function&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_transform", "name": "markdown\\MarkdownParserCompatibilityInterface::transform", "doc": "&quot;Performs some preprocessing on the input text and pass it through the document gamut.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_transformMarkdown", "name": "markdown\\MarkdownParserCompatibilityInterface::transformMarkdown", "doc": "&quot;Transform Markdown text to HTML.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_defaultTransform", "name": "markdown\\MarkdownParserCompatibilityInterface::defaultTransform", "doc": "&quot;Initialize the parser and return the result of its transform method.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_text", "name": "markdown\\MarkdownParserCompatibilityInterface::text", "doc": "&quot;Performs a text for both inline and blocks elements&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_line", "name": "markdown\\MarkdownParserCompatibilityInterface::line", "doc": "&quot;Performs a text with ONLY inline elements&quot;"},
            
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/API.html", "name": "MarkdownExtended\\API", "doc": "&quot;The API defines all required interfaces&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API.html#method_factory", "name": "MarkdownExtended\\API::factory", "doc": "&quot;Build an API object validating it if needed&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API.html#method_isValid", "name": "MarkdownExtended\\API::isValid", "doc": "&quot;Validate an API object checking its implemented interfaces&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API.html#method_getRelativeClassname", "name": "MarkdownExtended\\API::getRelativeClassname", "doc": "&quot;Get a class name without the current namespace if present&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API.html#method_getAbsoluteClassname", "name": "MarkdownExtended\\API::getAbsoluteClassname", "doc": "&quot;Get a class name with the current namespace&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API.html#method_debug", "name": "MarkdownExtended\\API::debug", "doc": "&quot;Debug infos on screen during parsing&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/CollectionInterface.html", "name": "MarkdownExtended\\API\\CollectionInterface", "doc": "&quot;Interface CollectionInterface&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/ContentInterface.html", "name": "MarkdownExtended\\API\\ContentInterface", "doc": "&quot;Interface to implement for &lt;code&gt;MarkdownExtended\\Content&lt;\/code&gt; objects&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\ContentInterface", "fromLink": "MarkdownExtended/API/ContentInterface.html", "link": "MarkdownExtended/API/ContentInterface.html#method_getSource", "name": "MarkdownExtended\\API\\ContentInterface::getSource", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/GamutInterface.html", "name": "MarkdownExtended\\API\\GamutInterface", "doc": "&quot;Interface GamutInterface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\GamutInterface", "fromLink": "MarkdownExtended/API/GamutInterface.html", "link": "MarkdownExtended/API/GamutInterface.html#method_getDefaultMethod", "name": "MarkdownExtended\\API\\GamutInterface::getDefaultMethod", "doc": "&quot;Must return a method name&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/KernelInterface.html", "name": "MarkdownExtended\\API\\KernelInterface", "doc": "&quot;Interface that defines a \&quot;kernel\&quot; principle&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method___construct", "name": "MarkdownExtended\\API\\KernelInterface::__construct", "doc": "&quot;Initialize the registry and flush the contents stack&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_getInstance", "name": "MarkdownExtended\\API\\KernelInterface::getInstance", "doc": "&quot;Get the instance, which will be created if required&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_create", "name": "MarkdownExtended\\API\\KernelInterface::create", "doc": "&quot;Create a new singleton instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_factory", "name": "MarkdownExtended\\API\\KernelInterface::factory", "doc": "&quot;Build, retain and return a dependency instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_get", "name": "MarkdownExtended\\API\\KernelInterface::get", "doc": "&quot;Get a service from the container ; load it if absent&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_transformString", "name": "MarkdownExtended\\API\\KernelInterface::transformString", "doc": "&quot;Transform a source string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\KernelInterface", "fromLink": "MarkdownExtended/API/KernelInterface.html", "link": "MarkdownExtended/API/KernelInterface.html#method_transformSource", "name": "MarkdownExtended\\API\\KernelInterface::transformSource", "doc": "&quot;Transform a source file content&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface", "doc": "&quot;PHP Markdown Extended OutputFormat helper interface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatHelperInterface", "fromLink": "MarkdownExtended/API/OutputFormatHelperInterface.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html#method_getFullContent", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface::getFullContent", "doc": "&quot;This must return a full formatted string ready to write a well-formed document in the considered format&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatHelperInterface", "fromLink": "MarkdownExtended/API/OutputFormatHelperInterface.html", "link": "MarkdownExtended/API/OutputFormatHelperInterface.html#method_getToc", "name": "MarkdownExtended\\API\\OutputFormatHelperInterface::getToc", "doc": "&quot;This must return a full formatted table of contents in the considered format&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/OutputFormatInterface.html", "name": "MarkdownExtended\\API\\OutputFormatInterface", "doc": "&quot;PHP Markdown Extended OutputFormat interface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatInterface", "fromLink": "MarkdownExtended/API/OutputFormatInterface.html", "link": "MarkdownExtended/API/OutputFormatInterface.html#method_buildTag", "name": "MarkdownExtended\\API\\OutputFormatInterface::buildTag", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\OutputFormatInterface", "fromLink": "MarkdownExtended/API/OutputFormatInterface.html", "link": "MarkdownExtended/API/OutputFormatInterface.html#method_getTagString", "name": "MarkdownExtended\\API\\OutputFormatInterface::getTagString", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/ParserInterface.html", "name": "MarkdownExtended\\API\\ParserInterface", "doc": "&quot;Interface for a content parser&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\ParserInterface", "fromLink": "MarkdownExtended/API/ParserInterface.html", "link": "MarkdownExtended/API/ParserInterface.html#method___construct", "name": "MarkdownExtended\\API\\ParserInterface::__construct", "doc": "&quot;Constructor function: Initialize the parser object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\ParserInterface", "fromLink": "MarkdownExtended/API/ParserInterface.html", "link": "MarkdownExtended/API/ParserInterface.html#method_parse", "name": "MarkdownExtended\\API\\ParserInterface::parse", "doc": "&quot;Main function. Performs some preprocessing on the input text\nand pass it through the document gamut.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\API", "fromLink": "MarkdownExtended/API.html", "link": "MarkdownExtended/API/TemplaterInterface.html", "name": "MarkdownExtended\\API\\TemplaterInterface", "doc": "&quot;Interface TemplaterInterface&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\API\\TemplaterInterface", "fromLink": "MarkdownExtended/API/TemplaterInterface.html", "link": "MarkdownExtended/API/TemplaterInterface.html#method_getTemplate", "name": "MarkdownExtended\\API\\TemplaterInterface::getTemplate", "doc": "&quot;Get the template file path&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\API\\TemplaterInterface", "fromLink": "MarkdownExtended/API/TemplaterInterface.html", "link": "MarkdownExtended/API/TemplaterInterface.html#method___toString", "name": "MarkdownExtended\\API\\TemplaterInterface::__toString", "doc": "&quot;Get the template content with loaded Markdown parsed content parts inserted&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\CommandLine", "fromLink": "MarkdownExtended/CommandLine.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html", "name": "MarkdownExtended\\CommandLine\\AbstractConsole", "doc": "&quot;Command line controller\/interface base&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method___construct", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::__construct", "doc": "&quot;Constructor&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_write", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::write", "doc": "&quot;Write an info to CLI output&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_info", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::info", "doc": "&quot;Write an info in verbose mode&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_separator", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::separator", "doc": "&quot;Write an separator line in verbose mode&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_error", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::error", "doc": "&quot;Write an error info and exit&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_caught", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::caught", "doc": "&quot;Write a caught exception&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_exec", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::exec", "doc": "&quot;Exec a command&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_runOption_verbose", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::runOption_verbose", "doc": "&quot;Run the verbose option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_runOption_quiet", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::runOption_quiet", "doc": "&quot;Run the quiet option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_runOption_debug", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::runOption_debug", "doc": "&quot;Run the debug option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_runOption_usage", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::runOption_usage", "doc": "&quot;Run the usage option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_setScriptPath", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::setScriptPath", "doc": "&quot;Set the current script full path&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_run", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::run", "doc": "&quot;Run the whole script depending on options set&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_writeOutputFile", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::writeOutputFile", "doc": "&quot;Write a result for each processed file or string in a file&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_writeOutput", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::writeOutput", "doc": "&quot;Write a result for each processed file or string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\AbstractConsole", "fromLink": "MarkdownExtended/CommandLine/AbstractConsole.html", "link": "MarkdownExtended/CommandLine/AbstractConsole.html#method_writeInputTitle", "name": "MarkdownExtended\\CommandLine\\AbstractConsole::writeInputTitle", "doc": "&quot;Write a title for each processed file or string&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\CommandLine", "fromLink": "MarkdownExtended/CommandLine.html", "link": "MarkdownExtended/CommandLine/Console.html", "name": "MarkdownExtended\\CommandLine\\Console", "doc": "&quot;Command line controller\/interface for MarkdownExtended&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method___construct", "name": "MarkdownExtended\\CommandLine\\Console::__construct", "doc": "&quot;Constructor&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_usage", "name": "MarkdownExtended\\CommandLine\\Console::runOption_usage", "doc": "&quot;Run the usage option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_help", "name": "MarkdownExtended\\CommandLine\\Console::runOption_help", "doc": "&quot;Get the help string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_version", "name": "MarkdownExtended\\CommandLine\\Console::runOption_version", "doc": "&quot;Run the version option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_man", "name": "MarkdownExtended\\CommandLine\\Console::runOption_man", "doc": "&quot;Run the manual option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_multi", "name": "MarkdownExtended\\CommandLine\\Console::runOption_multi", "doc": "&quot;Run the multi option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_output", "name": "MarkdownExtended\\CommandLine\\Console::runOption_output", "doc": "&quot;Run the output option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_filter_html", "name": "MarkdownExtended\\CommandLine\\Console::runOption_filter_html", "doc": "&quot;Run the HTML filter option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_filter_styles", "name": "MarkdownExtended\\CommandLine\\Console::runOption_filter_styles", "doc": "&quot;Run the styles filter option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_extract", "name": "MarkdownExtended\\CommandLine\\Console::runOption_extract", "doc": "&quot;Run the extract option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_template", "name": "MarkdownExtended\\CommandLine\\Console::runOption_template", "doc": "&quot;Run the template option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_nofilter", "name": "MarkdownExtended\\CommandLine\\Console::runOption_nofilter", "doc": "&quot;Run the no-filter option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_format", "name": "MarkdownExtended\\CommandLine\\Console::runOption_format", "doc": "&quot;Run the format option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_body", "name": "MarkdownExtended\\CommandLine\\Console::runOption_body", "doc": "&quot;Run the &#039;body&#039; alias&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOption_simple", "name": "MarkdownExtended\\CommandLine\\Console::runOption_simple", "doc": "&quot;Run the &#039;simple&#039; alias&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_run", "name": "MarkdownExtended\\CommandLine\\Console::run", "doc": "&quot;Run the whole script depending on options set&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runStoryOnOneFile", "name": "MarkdownExtended\\CommandLine\\Console::runStoryOnOneFile", "doc": "&quot;Run the MDE process on one file or input&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_runOneFile", "name": "MarkdownExtended\\CommandLine\\Console::runOneFile", "doc": "&quot;Actually run the MDE process on a file or string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_getInput", "name": "MarkdownExtended\\CommandLine\\Console::getInput", "doc": "&quot;Creates a &lt;code&gt;\\MarkdownExtended\\API\\ContentInterface&lt;\/code&gt; object from filename or string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_parseContent", "name": "MarkdownExtended\\CommandLine\\Console::parseContent", "doc": "&quot;Process a Content parsing&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Console", "fromLink": "MarkdownExtended/CommandLine/Console.html", "link": "MarkdownExtended/CommandLine/Console.html#method_extractContent", "name": "MarkdownExtended\\CommandLine\\Console::extractContent", "doc": "&quot;Process a Content parsing just for special gamuts&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\CommandLine", "fromLink": "MarkdownExtended/CommandLine.html", "link": "MarkdownExtended/CommandLine/Reminders.html", "name": "MarkdownExtended\\CommandLine\\Reminders", "doc": "&quot;Command line controller to rebuild the MarkdownExtended reminders HTML&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method___construct", "name": "MarkdownExtended\\CommandLine\\Reminders::__construct", "doc": "&quot;Constructor\nSetup the input\/output, verify that we are in CLI mode and that something is requested&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_runOption_help", "name": "MarkdownExtended\\CommandLine\\Reminders::runOption_help", "doc": "&quot;Get the help string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_runOption_docsdir", "name": "MarkdownExtended\\CommandLine\\Reminders::runOption_docsdir", "doc": "&quot;Run the multi docsdir&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_runOption_output", "name": "MarkdownExtended\\CommandLine\\Reminders::runOption_output", "doc": "&quot;Run the output option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_runOption_format", "name": "MarkdownExtended\\CommandLine\\Reminders::runOption_format", "doc": "&quot;Run the format option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_runOption_template", "name": "MarkdownExtended\\CommandLine\\Reminders::runOption_template", "doc": "&quot;Run the template option&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_run", "name": "MarkdownExtended\\CommandLine\\Reminders::run", "doc": "&quot;Run the whole script depending on options set&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_writeOutputFile", "name": "MarkdownExtended\\CommandLine\\Reminders::writeOutputFile", "doc": "&quot;Write a result for each processed file or string in a file&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_writeOutput", "name": "MarkdownExtended\\CommandLine\\Reminders::writeOutput", "doc": "&quot;Write a result for each processed file or string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_writeInputTitle", "name": "MarkdownExtended\\CommandLine\\Reminders::writeInputTitle", "doc": "&quot;Write a title for each processed file or string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_filterSpan", "name": "MarkdownExtended\\CommandLine\\Reminders::filterSpan", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_filterBlock", "name": "MarkdownExtended\\CommandLine\\Reminders::filterBlock", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\CommandLine\\Reminders", "fromLink": "MarkdownExtended/CommandLine/Reminders.html", "link": "MarkdownExtended/CommandLine/Reminders.html#method_filterMisc", "name": "MarkdownExtended\\CommandLine\\Reminders::filterMisc", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Config.html", "name": "MarkdownExtended\\Config", "doc": "&quot;Global configuration registry&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method___construct", "name": "MarkdownExtended\\Config::__construct", "doc": "&quot;Create a configuration object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_reset", "name": "MarkdownExtended\\Config::reset", "doc": "&quot;Reset data on defaults&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_init", "name": "MarkdownExtended\\Config::init", "doc": "&quot;Init a new config with user options&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_load", "name": "MarkdownExtended\\Config::load", "doc": "&quot;Load and parse a INI configuration file&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_reload", "name": "MarkdownExtended\\Config::reload", "doc": "&quot;Over-load a configuration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_overload", "name": "MarkdownExtended\\Config::overload", "doc": "&quot;Over-load a configuration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_setConfigFile", "name": "MarkdownExtended\\Config::setConfigFile", "doc": "&quot;Define the object config file&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Config", "fromLink": "MarkdownExtended/Config.html", "link": "MarkdownExtended/Config.html#method_getConfigFile", "name": "MarkdownExtended\\Config::getConfigFile", "doc": "&quot;Get the object config file&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Content.html", "name": "MarkdownExtended\\Content", "doc": "&quot;Class defining a content object for the Parser&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method___construct", "name": "MarkdownExtended\\Content::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method___call", "name": "MarkdownExtended\\Content::__call", "doc": "&quot;Magic method to handle any &lt;code&gt;getXX()&lt;\/code&gt;, &lt;code&gt;setXX()&lt;\/code&gt; or &lt;code&gt;addXX()&lt;\/code&gt; method call on the object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_setId", "name": "MarkdownExtended\\Content::setId", "doc": "&quot;Define the content ID&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getId", "name": "MarkdownExtended\\Content::getId", "doc": "&quot;Get the content ID&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getDirname", "name": "MarkdownExtended\\Content::getDirname", "doc": "&quot;Get the file dirname if so&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_setLastUpdate", "name": "MarkdownExtended\\Content::setLastUpdate", "doc": "&quot;Define the last update datetime of this content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getLastUpdate", "name": "MarkdownExtended\\Content::getLastUpdate", "doc": "&quot;Retrieve the content last update&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getLastUpdateToString", "name": "MarkdownExtended\\Content::getLastUpdateToString", "doc": "&quot;Get the last update of this content as string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getSource", "name": "MarkdownExtended\\Content::getSource", "doc": "&quot;Get the original source content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getTitle", "name": "MarkdownExtended\\Content::getTitle", "doc": "&quot;Get the content title&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getMetadata", "name": "MarkdownExtended\\Content::getMetadata", "doc": "&quot;Get the meta-data stack or one entry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_hasDomId", "name": "MarkdownExtended\\Content::hasDomId", "doc": "&quot;Verify if a reference is already defined in the DOM IDs register&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_getDomId", "name": "MarkdownExtended\\Content::getDomId", "doc": "&quot;Get a DOM unique ID&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Content", "fromLink": "MarkdownExtended/Content.html", "link": "MarkdownExtended/Content.html#method_setNewDomId", "name": "MarkdownExtended\\Content::setNewDomId", "doc": "&quot;Create and get a new DOM unique ID&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/ContentCollection.html", "name": "MarkdownExtended\\ContentCollection", "doc": "&quot;Class defining a collection of content objects&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method___construct", "name": "MarkdownExtended\\ContentCollection::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_exists", "name": "MarkdownExtended\\ContentCollection::exists", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_clear", "name": "MarkdownExtended\\ContentCollection::clear", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_set", "name": "MarkdownExtended\\ContentCollection::set", "doc": "&quot;Define a new item in the collection by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_add", "name": "MarkdownExtended\\ContentCollection::add", "doc": "&quot;Add a new item at the end of the collection&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_remove", "name": "MarkdownExtended\\ContentCollection::remove", "doc": "&quot;Delete an item of the collection by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_get", "name": "MarkdownExtended\\ContentCollection::get", "doc": "&quot;Get a collection item by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_current", "name": "MarkdownExtended\\ContentCollection::current", "doc": "&quot;Get the current collection item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_key", "name": "MarkdownExtended\\ContentCollection::key", "doc": "&quot;Get the current collection item key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_next", "name": "MarkdownExtended\\ContentCollection::next", "doc": "&quot;Get next collection item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_rewind", "name": "MarkdownExtended\\ContentCollection::rewind", "doc": "&quot;Put the iterator on the first collection item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_valid", "name": "MarkdownExtended\\ContentCollection::valid", "doc": "&quot;Test if current collection item exists&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_first", "name": "MarkdownExtended\\ContentCollection::first", "doc": "&quot;Rewind to first collection item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_last", "name": "MarkdownExtended\\ContentCollection::last", "doc": "&quot;Go to last collection item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_offsetExists", "name": "MarkdownExtended\\ContentCollection::offsetExists", "doc": "&quot;Test if a collection item exists by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_offsetGet", "name": "MarkdownExtended\\ContentCollection::offsetGet", "doc": "&quot;Get a collection item by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_offsetSet", "name": "MarkdownExtended\\ContentCollection::offsetSet", "doc": "&quot;Set a collection item by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_offsetUnset", "name": "MarkdownExtended\\ContentCollection::offsetUnset", "doc": "&quot;Unset a collection item by key&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_count", "name": "MarkdownExtended\\ContentCollection::count", "doc": "&quot;Count number of collection items&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\ContentCollection", "fromLink": "MarkdownExtended/ContentCollection.html", "link": "MarkdownExtended/ContentCollection.html#method_getArrayFilter", "name": "MarkdownExtended\\ContentCollection::getArrayFilter", "doc": "&quot;Run a callback of the collection items&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Exception", "fromLink": "MarkdownExtended/Exception.html", "link": "MarkdownExtended/Exception/DomainException.html", "name": "MarkdownExtended\\Exception\\DomainException", "doc": "&quot;Class DomainException&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\Exception", "fromLink": "MarkdownExtended/Exception.html", "link": "MarkdownExtended/Exception/Exception.html", "name": "MarkdownExtended\\Exception\\Exception", "doc": "&quot;Class Exception&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\Exception", "fromLink": "MarkdownExtended/Exception.html", "link": "MarkdownExtended/Exception/InvalidArgumentException.html", "name": "MarkdownExtended\\Exception\\InvalidArgumentException", "doc": "&quot;Class InvalidArgumentException&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\Exception", "fromLink": "MarkdownExtended/Exception.html", "link": "MarkdownExtended/Exception/RuntimeException.html", "name": "MarkdownExtended\\Exception\\RuntimeException", "doc": "&quot;Class RuntimeException&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\Exception", "fromLink": "MarkdownExtended/Exception.html", "link": "MarkdownExtended/Exception/UnexpectedValueException.html", "name": "MarkdownExtended\\Exception\\UnexpectedValueException", "doc": "&quot;Class UnexpectedValueException&quot;"},
                    
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar", "fromLink": "MarkdownExtended/Grammar.html", "link": "MarkdownExtended/Grammar/AbstractGamut.html", "name": "MarkdownExtended\\Grammar\\AbstractGamut", "doc": "&quot;The base class for all Filters and Tools&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\AbstractGamut", "fromLink": "MarkdownExtended/Grammar/AbstractGamut.html", "link": "MarkdownExtended/Grammar/AbstractGamut.html#method_runGamut", "name": "MarkdownExtended\\Grammar\\AbstractGamut::runGamut", "doc": "&quot;Run a gamut stack from a filter or tool&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\AbstractGamut", "fromLink": "MarkdownExtended/Grammar/AbstractGamut.html", "link": "MarkdownExtended/Grammar/AbstractGamut.html#method_resetHash", "name": "MarkdownExtended\\Grammar\\AbstractGamut::resetHash", "doc": "&quot;Reset the hash table&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\AbstractGamut", "fromLink": "MarkdownExtended/Grammar/AbstractGamut.html", "link": "MarkdownExtended/Grammar/AbstractGamut.html#method_setHash", "name": "MarkdownExtended\\Grammar\\AbstractGamut::setHash", "doc": "&quot;Reference a new hash&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\AbstractGamut", "fromLink": "MarkdownExtended/Grammar/AbstractGamut.html", "link": "MarkdownExtended/Grammar/AbstractGamut.html#method_getHash", "name": "MarkdownExtended\\Grammar\\AbstractGamut::getHash", "doc": "&quot;Retrieve a hash by its key&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar", "fromLink": "MarkdownExtended/Grammar.html", "link": "MarkdownExtended/Grammar/Filter.html", "name": "MarkdownExtended\\Grammar\\Filter", "doc": "&quot;Base class for all Filters&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_getDefaultMethod", "name": "MarkdownExtended\\Grammar\\Filter::getDefaultMethod", "doc": "&quot;Must return a method name&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter::transform", "doc": "&quot;Must process the filter on a text&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_hashPart", "name": "MarkdownExtended\\Grammar\\Filter::hashPart", "doc": "&quot;Called whenever a tag must be hashed when a function insert an atomic\nelement in the text stream. Passing $text to through this function gives\na unique text-token which will be reverted back when calling unhash.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_hashBlock", "name": "MarkdownExtended\\Grammar\\Filter::hashBlock", "doc": "&quot;Shortcut function for hashPart with block-level boundaries.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_hashClean", "name": "MarkdownExtended\\Grammar\\Filter::hashClean", "doc": "&quot;Called whenever a tag must be hashed when a function insert a \&quot;clean\&quot; tag\nin $text, it pass through this function and is automatically escaped,\nblocking invalid nested overlap.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter.html#method_unhash", "name": "MarkdownExtended\\Grammar\\Filter::unhash", "doc": "&quot;Swap back in all the tags hashed by _HashHTMLBlocks.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Abbreviation.html", "name": "MarkdownExtended\\Grammar\\Filter\\Abbreviation", "doc": "&quot;Process Markdown abbreviations&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Abbreviation", "fromLink": "MarkdownExtended/Grammar/Filter/Abbreviation.html", "link": "MarkdownExtended/Grammar/Filter/Abbreviation.html#method__setup", "name": "MarkdownExtended\\Grammar\\Filter\\Abbreviation::_setup", "doc": "&quot;Prepare masks for predefined abbreviations and descriptions&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Abbreviation", "fromLink": "MarkdownExtended/Grammar/Filter/Abbreviation.html", "link": "MarkdownExtended/Grammar/Filter/Abbreviation.html#method__teardown", "name": "MarkdownExtended\\Grammar\\Filter\\Abbreviation::_teardown", "doc": "&quot;Reset masks created by the &lt;code&gt;_setup()&lt;\/code&gt; method&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Abbreviation", "fromLink": "MarkdownExtended/Grammar/Filter/Abbreviation.html", "link": "MarkdownExtended/Grammar/Filter/Abbreviation.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Abbreviation::transform", "doc": "&quot;Find defined abbreviations in text and wrap them in &lt;abbr&gt; elements&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Abbreviation", "fromLink": "MarkdownExtended/Grammar/Filter/Abbreviation.html", "link": "MarkdownExtended/Grammar/Filter/Abbreviation.html#method_strip", "name": "MarkdownExtended\\Grammar\\Filter\\Abbreviation::strip", "doc": "&quot;Strips abbreviations from text, stores titles in hash references.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Anchor.html", "name": "MarkdownExtended\\Grammar\\Filter\\Anchor", "doc": "&quot;Process Markdown links&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Anchor", "fromLink": "MarkdownExtended/Grammar/Filter/Anchor.html", "link": "MarkdownExtended/Grammar/Filter/Anchor.html#method__setup", "name": "MarkdownExtended\\Grammar\\Filter\\Anchor::_setup", "doc": "&quot;Set up the &lt;code&gt;in_anchor&lt;\/code&gt; config flag on &lt;code&gt;false&lt;\/code&gt;&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Anchor", "fromLink": "MarkdownExtended/Grammar/Filter/Anchor.html", "link": "MarkdownExtended/Grammar/Filter/Anchor.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Anchor::transform", "doc": "&quot;Turn Markdown link shortcuts into XHTML &lt;a&gt; tags.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/AutoLink.html", "name": "MarkdownExtended\\Grammar\\Filter\\AutoLink", "doc": "&quot;Process Markdown automatic links&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\AutoLink", "fromLink": "MarkdownExtended/Grammar/Filter/AutoLink.html", "link": "MarkdownExtended/Grammar/Filter/AutoLink.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\AutoLink::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/BlockInclusion.html", "name": "MarkdownExtended\\Grammar\\Filter\\BlockInclusion", "doc": "&quot;Process the inclusion of third-party Markdown files&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\BlockInclusion", "fromLink": "MarkdownExtended/Grammar/Filter/BlockInclusion.html", "link": "MarkdownExtended/Grammar/Filter/BlockInclusion.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\BlockInclusion::transform", "doc": "&quot;Find defined inclusion blocks&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/BlockQuote.html", "name": "MarkdownExtended\\Grammar\\Filter\\BlockQuote", "doc": "&quot;Process Markdown blockquotes&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\BlockQuote", "fromLink": "MarkdownExtended/Grammar/Filter/BlockQuote.html", "link": "MarkdownExtended/Grammar/Filter/BlockQuote.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\BlockQuote::transform", "doc": "&quot;Create blockquotes blocks&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/CodeBlock.html", "name": "MarkdownExtended\\Grammar\\Filter\\CodeBlock", "doc": "&quot;Process Markdown code blocks&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\CodeBlock", "fromLink": "MarkdownExtended/Grammar/Filter/CodeBlock.html", "link": "MarkdownExtended/Grammar/Filter/CodeBlock.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\CodeBlock::transform", "doc": "&quot;Process Markdown &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;\/code&gt; blocks.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\CodeBlock", "fromLink": "MarkdownExtended/Grammar/Filter/CodeBlock.html", "link": "MarkdownExtended/Grammar/Filter/CodeBlock.html#method_span", "name": "MarkdownExtended\\Grammar\\Filter\\CodeBlock::span", "doc": "&quot;Create a code span markup for $code. Called from handleSpanToken.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/DefinitionList.html", "name": "MarkdownExtended\\Grammar\\Filter\\DefinitionList", "doc": "&quot;Process Markdown definitions lists&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\DefinitionList", "fromLink": "MarkdownExtended/Grammar/Filter/DefinitionList.html", "link": "MarkdownExtended/Grammar/Filter/DefinitionList.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\DefinitionList::transform", "doc": "&quot;Form HTML definition lists.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\DefinitionList", "fromLink": "MarkdownExtended/Grammar/Filter/DefinitionList.html", "link": "MarkdownExtended/Grammar/Filter/DefinitionList.html#method_transformItems", "name": "MarkdownExtended\\Grammar\\Filter\\DefinitionList::transformItems", "doc": "&quot;Process the contents of a single definition list, splitting it\ninto individual term and definition list items.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Emphasis.html", "name": "MarkdownExtended\\Grammar\\Filter\\Emphasis", "doc": "&quot;Process Markdown emphasis: bold &amp;amp; italic&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Emphasis", "fromLink": "MarkdownExtended/Grammar/Filter/Emphasis.html", "link": "MarkdownExtended/Grammar/Filter/Emphasis.html#method_prepare", "name": "MarkdownExtended\\Grammar\\Filter\\Emphasis::prepare", "doc": "&quot;Prepare regular expressions for searching emphasis tokens in any context.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Emphasis", "fromLink": "MarkdownExtended/Grammar/Filter/Emphasis.html", "link": "MarkdownExtended/Grammar/Filter/Emphasis.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Emphasis::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/FencedCodeBlock.html", "name": "MarkdownExtended\\Grammar\\Filter\\FencedCodeBlock", "doc": "&quot;Process Markdown fenced code blocks&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\FencedCodeBlock", "fromLink": "MarkdownExtended/Grammar/Filter/FencedCodeBlock.html", "link": "MarkdownExtended/Grammar/Filter/FencedCodeBlock.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\FencedCodeBlock::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/HTML.html", "name": "MarkdownExtended\\Grammar\\Filter\\HTML", "doc": "&quot;Process Markdown in-text HTML&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\HTML", "fromLink": "MarkdownExtended/Grammar/Filter/HTML.html", "link": "MarkdownExtended/Grammar/Filter/HTML.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\HTML::transform", "doc": "&quot;Hashify HTML Blocks and \&quot;clean tags\&quot;.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/HardBreak.html", "name": "MarkdownExtended\\Grammar\\Filter\\HardBreak", "doc": "&quot;Process Markdown hard breaks&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\HardBreak", "fromLink": "MarkdownExtended/Grammar/Filter/HardBreak.html", "link": "MarkdownExtended/Grammar/Filter/HardBreak.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\HardBreak::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Header.html", "name": "MarkdownExtended\\Grammar\\Filter\\Header", "doc": "&quot;Process Markdown headers&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Header", "fromLink": "MarkdownExtended/Grammar/Filter/Header.html", "link": "MarkdownExtended/Grammar/Filter/Header.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Header::transform", "doc": "&quot;Redefined to add id attribute support.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/HorizontalRule.html", "name": "MarkdownExtended\\Grammar\\Filter\\HorizontalRule", "doc": "&quot;Process Markdown horizontal rules&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\HorizontalRule", "fromLink": "MarkdownExtended/Grammar/Filter/HorizontalRule.html", "link": "MarkdownExtended/Grammar/Filter/HorizontalRule.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\HorizontalRule::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Image.html", "name": "MarkdownExtended\\Grammar\\Filter\\Image", "doc": "&quot;Process Markdown images&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Image", "fromLink": "MarkdownExtended/Grammar/Filter/Image.html", "link": "MarkdownExtended/Grammar/Filter/Image.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Image::transform", "doc": "&quot;Turn Markdown image shortcuts into &lt;img&gt; tags.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/LinkDefinition.html", "name": "MarkdownExtended\\Grammar\\Filter\\LinkDefinition", "doc": "&quot;Process Markdown definitions links&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\LinkDefinition", "fromLink": "MarkdownExtended/Grammar/Filter/LinkDefinition.html", "link": "MarkdownExtended/Grammar/Filter/LinkDefinition.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\LinkDefinition::transform", "doc": "&quot;Mandatory method&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\LinkDefinition", "fromLink": "MarkdownExtended/Grammar/Filter/LinkDefinition.html", "link": "MarkdownExtended/Grammar/Filter/LinkDefinition.html#method_strip", "name": "MarkdownExtended\\Grammar\\Filter\\LinkDefinition::strip", "doc": "&quot;Strips link definitions from text, stores the URLs and titles in hash references&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/ListItem.html", "name": "MarkdownExtended\\Grammar\\Filter\\ListItem", "doc": "&quot;Process Markdown list items&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\ListItem", "fromLink": "MarkdownExtended/Grammar/Filter/ListItem.html", "link": "MarkdownExtended/Grammar/Filter/ListItem.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\ListItem::transform", "doc": "&quot;Form HTML ordered (numbered) and unordered (bulleted) lists.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\ListItem", "fromLink": "MarkdownExtended/Grammar/Filter/ListItem.html", "link": "MarkdownExtended/Grammar/Filter/ListItem.html#method_transformItems", "name": "MarkdownExtended\\Grammar\\Filter\\ListItem::transformItems", "doc": "&quot;Process the contents of a single ordered or unordered list, splitting it\n into individual list items.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Maths.html", "name": "MarkdownExtended\\Grammar\\Filter\\Maths", "doc": "&quot;Process Markdown mathematics&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Maths", "fromLink": "MarkdownExtended/Grammar/Filter/Maths.html", "link": "MarkdownExtended/Grammar/Filter/Maths.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Maths::transform", "doc": "&quot;Wrap text between &amp;#91; and &amp;#93; in display math tags.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Maths", "fromLink": "MarkdownExtended/Grammar/Filter/Maths.html", "link": "MarkdownExtended/Grammar/Filter/Maths.html#method_span", "name": "MarkdownExtended\\Grammar\\Filter\\Maths::span", "doc": "&quot;Build each maths span&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/MetaData.html", "name": "MarkdownExtended\\Grammar\\Filter\\MetaData", "doc": "&quot;Process Markdown meta data&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\MetaData", "fromLink": "MarkdownExtended/Grammar/Filter/MetaData.html", "link": "MarkdownExtended/Grammar/Filter/MetaData.html#method__setup", "name": "MarkdownExtended\\Grammar\\Filter\\MetaData::_setup", "doc": "&quot;Prepare object with configuration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\MetaData", "fromLink": "MarkdownExtended/Grammar/Filter/MetaData.html", "link": "MarkdownExtended/Grammar/Filter/MetaData.html#method_strip", "name": "MarkdownExtended\\Grammar\\Filter\\MetaData::strip", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\MetaData", "fromLink": "MarkdownExtended/Grammar/Filter/MetaData.html", "link": "MarkdownExtended/Grammar/Filter/MetaData.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\MetaData::transform", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\MetaData", "fromLink": "MarkdownExtended/Grammar/Filter/MetaData.html", "link": "MarkdownExtended/Grammar/Filter/MetaData.html#method_append", "name": "MarkdownExtended\\Grammar\\Filter\\MetaData::append", "doc": "&quot;Build meta data strings&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Note.html", "name": "MarkdownExtended\\Grammar\\Filter\\Note", "doc": "&quot;Process Markdown notes: footnotes, glossary and bibliography notes&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method__setup", "name": "MarkdownExtended\\Grammar\\Filter\\Note::_setup", "doc": "&quot;Prepare all required arrays&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_strip", "name": "MarkdownExtended\\Grammar\\Filter\\Note::strip", "doc": "&quot;Strips link definitions from text, stores the URLs and titles in hash references.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Note::transform", "doc": "&quot;Replace footnote references in $text [string][#id] and [^id] with a special text-token\nwhich will be replaced by the actual footnote marker in appendFootnotes.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_append", "name": "MarkdownExtended\\Grammar\\Filter\\Note::append", "doc": "&quot;Append footnote list to text.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_transformFootnote", "name": "MarkdownExtended\\Grammar\\Filter\\Note::transformFootnote", "doc": "&quot;Append footnote list to text.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_transformGlossary", "name": "MarkdownExtended\\Grammar\\Filter\\Note::transformGlossary", "doc": "&quot;Append glossary notes list to text.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Note", "fromLink": "MarkdownExtended/Grammar/Filter/Note.html", "link": "MarkdownExtended/Grammar/Filter/Note.html#method_transformCitation", "name": "MarkdownExtended\\Grammar\\Filter\\Note::transformCitation", "doc": "&quot;Append bibliography notes list to text.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Span.html", "name": "MarkdownExtended\\Grammar\\Filter\\Span", "doc": "&quot;Process Markdown spans&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Span", "fromLink": "MarkdownExtended/Grammar/Filter/Span.html", "link": "MarkdownExtended/Grammar/Filter/Span.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Span::transform", "doc": "&quot;Take the string $str and parse it into tokens, hashing embedded HTML,\nescaped characters and handling code and maths spans.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Span", "fromLink": "MarkdownExtended/Grammar/Filter/Span.html", "link": "MarkdownExtended/Grammar/Filter/Span.html#method_handleSpanToken", "name": "MarkdownExtended\\Grammar\\Filter\\Span::handleSpanToken", "doc": "&quot;Handle $token provided by parseSpan by determining its nature and\nreturning the corresponding value that should replace it.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/Table.html", "name": "MarkdownExtended\\Grammar\\Filter\\Table", "doc": "&quot;Process Markdown tables&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\Table", "fromLink": "MarkdownExtended/Grammar/Filter/Table.html", "link": "MarkdownExtended/Grammar/Filter/Table.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\Table::transform", "doc": "&quot;Form HTML tables.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Filter", "fromLink": "MarkdownExtended/Grammar/Filter.html", "link": "MarkdownExtended/Grammar/Filter/TableOfContents.html", "name": "MarkdownExtended\\Grammar\\Filter\\TableOfContents", "doc": "&quot;Construct the global Table of Contents (hierarchical list of anchors)&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\TableOfContents", "fromLink": "MarkdownExtended/Grammar/Filter/TableOfContents.html", "link": "MarkdownExtended/Grammar/Filter/TableOfContents.html#method__setup", "name": "MarkdownExtended\\Grammar\\Filter\\TableOfContents::_setup", "doc": "&quot;Reset all properties at the begining&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Filter\\TableOfContents", "fromLink": "MarkdownExtended/Grammar/Filter/TableOfContents.html", "link": "MarkdownExtended/Grammar/Filter/TableOfContents.html#method_transform", "name": "MarkdownExtended\\Grammar\\Filter\\TableOfContents::transform", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar", "fromLink": "MarkdownExtended/Grammar.html", "link": "MarkdownExtended/Grammar/Gamut.html", "name": "MarkdownExtended\\Grammar\\Gamut", "doc": "&quot;Central class to execute Filters and Tools methods on a content&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Gamut", "fromLink": "MarkdownExtended/Grammar/Gamut.html", "link": "MarkdownExtended/Grammar/Gamut.html#method___construct", "name": "MarkdownExtended\\Grammar\\Gamut::__construct", "doc": "&quot;Set the gamuts aliases from config&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Gamut", "fromLink": "MarkdownExtended/Grammar/Gamut.html", "link": "MarkdownExtended/Grammar/Gamut.html#method_runGamuts", "name": "MarkdownExtended\\Grammar\\Gamut::runGamuts", "doc": "&quot;Run a table of gamuts by priority&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Gamut", "fromLink": "MarkdownExtended/Grammar/Gamut.html", "link": "MarkdownExtended/Grammar/Gamut.html#method_runGamutsMethod", "name": "MarkdownExtended\\Grammar\\Gamut::runGamutsMethod", "doc": "&quot;Run a table of gamuts for a specific method by priority&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Gamut", "fromLink": "MarkdownExtended/Grammar/Gamut.html", "link": "MarkdownExtended/Grammar/Gamut.html#method_runGamut", "name": "MarkdownExtended\\Grammar\\Gamut::runGamut", "doc": "&quot;Run a single gamut&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar", "fromLink": "MarkdownExtended/Grammar.html", "link": "MarkdownExtended/Grammar/Tool.html", "name": "MarkdownExtended\\Grammar\\Tool", "doc": "&quot;Abstract base class for Tools&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool.html#method_getDefaultMethod", "name": "MarkdownExtended\\Grammar\\Tool::getDefaultMethod", "doc": "&quot;Must return a method name&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool::run", "doc": "&quot;Must process the tool on a text&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/AppendEndingNewLines.html", "name": "MarkdownExtended\\Grammar\\Tool\\AppendEndingNewLines", "doc": "&quot;Class AppendEndingNewLines&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\AppendEndingNewLines", "fromLink": "MarkdownExtended/Grammar/Tool/AppendEndingNewLines.html", "link": "MarkdownExtended/Grammar/Tool/AppendEndingNewLines.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\AppendEndingNewLines::run", "doc": "&quot;Make sure $text ends with a couple of newlines&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/Detab.html", "name": "MarkdownExtended\\Grammar\\Tool\\Detab", "doc": "&quot;Class Detab&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\Detab", "fromLink": "MarkdownExtended/Grammar/Tool/Detab.html", "link": "MarkdownExtended/Grammar/Tool/Detab.html#method_init", "name": "MarkdownExtended\\Grammar\\Tool\\Detab::init", "doc": "&quot;Check for the availability of the function in the &lt;code&gt;utf8_strlen&lt;\/code&gt; property\n(initially &lt;code&gt;mb_strlen&lt;\/code&gt;). If the function is not available, create a\nfunction that will loosely count the number of UTF-8 characters with a\nregular expression.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\Detab", "fromLink": "MarkdownExtended/Grammar/Tool/Detab.html", "link": "MarkdownExtended/Grammar/Tool/Detab.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\Detab::run", "doc": "&quot;Replace tabs with the appropriate amount of space.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/EncodeAmpAndAngle.html", "name": "MarkdownExtended\\Grammar\\Tool\\EncodeAmpAndAngle", "doc": "&quot;Class EncodeAmpAndAngle&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\EncodeAmpAndAngle", "fromLink": "MarkdownExtended/Grammar/Tool/EncodeAmpAndAngle.html", "link": "MarkdownExtended/Grammar/Tool/EncodeAmpAndAngle.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\EncodeAmpAndAngle::run", "doc": "&quot;Smart processing for ampersands and angle brackets that need to\nbe encoded. Valid character entities are left alone unless the\nno-entities mode is set.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/EncodeAttribute.html", "name": "MarkdownExtended\\Grammar\\Tool\\EncodeAttribute", "doc": "&quot;Class EncodeAttribute&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\EncodeAttribute", "fromLink": "MarkdownExtended/Grammar/Tool/EncodeAttribute.html", "link": "MarkdownExtended/Grammar/Tool/EncodeAttribute.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\EncodeAttribute::run", "doc": "&quot;Encode text for a double-quoted HTML attribute. This function\nis &lt;em&gt;not&lt;\/em&gt; suitable for attributes enclosed in single quotes.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/ExtractAttributes.html", "name": "MarkdownExtended\\Grammar\\Tool\\ExtractAttributes", "doc": "&quot;Class ExtractAttributes&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\ExtractAttributes", "fromLink": "MarkdownExtended/Grammar/Tool/ExtractAttributes.html", "link": "MarkdownExtended/Grammar/Tool/ExtractAttributes.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\ExtractAttributes::run", "doc": "&quot;Extract attributes from string &#039;a=\&quot;b\&quot;&#039;&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/Outdent.html", "name": "MarkdownExtended\\Grammar\\Tool\\Outdent", "doc": "&quot;Class Outdent&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\Outdent", "fromLink": "MarkdownExtended/Grammar/Tool/Outdent.html", "link": "MarkdownExtended/Grammar/Tool/Outdent.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\Outdent::run", "doc": "&quot;Remove one level of line-leading tabs or spaces&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/RebuildParagraph.html", "name": "MarkdownExtended\\Grammar\\Tool\\RebuildParagraph", "doc": "&quot;Class RebuildParagraph&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\RebuildParagraph", "fromLink": "MarkdownExtended/Grammar/Tool/RebuildParagraph.html", "link": "MarkdownExtended/Grammar/Tool/RebuildParagraph.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\RebuildParagraph::run", "doc": "&quot;Process paragraphs&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/RemoveUtf8Marker.html", "name": "MarkdownExtended\\Grammar\\Tool\\RemoveUtf8Marker", "doc": "&quot;Class RemoveUtf8Marker&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\RemoveUtf8Marker", "fromLink": "MarkdownExtended/Grammar/Tool/RemoveUtf8Marker.html", "link": "MarkdownExtended/Grammar/Tool/RemoveUtf8Marker.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\RemoveUtf8Marker::run", "doc": "&quot;Remove UTF-8 BOM and marker character in input, if present.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/StandardizeLineEnding.html", "name": "MarkdownExtended\\Grammar\\Tool\\StandardizeLineEnding", "doc": "&quot;Class StandardizeLineEnding&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\StandardizeLineEnding", "fromLink": "MarkdownExtended/Grammar/Tool/StandardizeLineEnding.html", "link": "MarkdownExtended/Grammar/Tool/StandardizeLineEnding.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\StandardizeLineEnding::run", "doc": "&quot;Standardize line endings: DOS to Unix and Mac to Unix&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Grammar\\Tool", "fromLink": "MarkdownExtended/Grammar/Tool.html", "link": "MarkdownExtended/Grammar/Tool/StripSpacedLines.html", "name": "MarkdownExtended\\Grammar\\Tool\\StripSpacedLines", "doc": "&quot;Class StripSpacedLines&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Grammar\\Tool\\StripSpacedLines", "fromLink": "MarkdownExtended/Grammar/Tool/StripSpacedLines.html", "link": "MarkdownExtended/Grammar/Tool/StripSpacedLines.html#method_run", "name": "MarkdownExtended\\Grammar\\Tool\\StripSpacedLines::run", "doc": "&quot;Strip any lines consisting only of spaces and tabs.&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Helper.html", "name": "MarkdownExtended\\Helper", "doc": "&quot;Global Markdown Extended Helper&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_debug", "name": "MarkdownExtended\\Helper::debug", "doc": "&quot;Debug function&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_info", "name": "MarkdownExtended\\Helper::info", "doc": "&quot;Get information string about the current Markdown Extended object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_smallInfo", "name": "MarkdownExtended\\Helper::smallInfo", "doc": "&quot;Get information string about the current Markdown Extended object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_escapeCodeContent", "name": "MarkdownExtended\\Helper::escapeCodeContent", "doc": "&quot;Escape the code blocks contents to get HTML entities&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_fillPlaceholders", "name": "MarkdownExtended\\Helper::fillPlaceholders", "doc": "&quot;Replace any &lt;code&gt;%%&lt;\/code&gt; mask by a replacement&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_header2Label", "name": "MarkdownExtended\\Helper::header2Label", "doc": "&quot;Transform a header string to DOM valid label&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_encodeEmailAddress", "name": "MarkdownExtended\\Helper::encodeEmailAddress", "doc": "&quot;Input: an email address, e.g. \&quot;foo@example.com\&quot;&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_getFileSize", "name": "MarkdownExtended\\Helper::getFileSize", "doc": "&quot;Get a human readable file size&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_buildRegex", "name": "MarkdownExtended\\Helper::buildRegex", "doc": "&quot;Get a ready-to-use regular expression from a string pattern&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_find", "name": "MarkdownExtended\\Helper::find", "doc": "&quot;Find a resource file and return its path&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_toCamelCase", "name": "MarkdownExtended\\Helper::toCamelCase", "doc": "&quot;Transform a name in CamelCase&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Helper", "fromLink": "MarkdownExtended/Helper.html", "link": "MarkdownExtended/Helper.html#method_fromCamelCase", "name": "MarkdownExtended\\Helper::fromCamelCase", "doc": "&quot;Transform a name from CamelCase to other&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html", "name": "MarkdownExtended\\MarkdownExtended", "doc": "&quot;PHP Markdown Extended Mother Class&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method___construct", "name": "MarkdownExtended\\MarkdownExtended::__construct", "doc": "&quot;Initialize the registry and flush the contents stack&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getInstance", "name": "MarkdownExtended\\MarkdownExtended::getInstance", "doc": "&quot;Get a Markdown Extended instance (last created one by default)&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_create", "name": "MarkdownExtended\\MarkdownExtended::create", "doc": "&quot;Create a new MDE instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_transformString", "name": "MarkdownExtended\\MarkdownExtended::transformString", "doc": "&quot;Transform a Markdown source string&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_transformSource", "name": "MarkdownExtended\\MarkdownExtended::transformSource", "doc": "&quot;Transform a Markdown source file content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_addProcessedContent", "name": "MarkdownExtended\\MarkdownExtended::addProcessedContent", "doc": "&quot;Add a new processed content in the contents stack&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getContent", "name": "MarkdownExtended\\MarkdownExtended::getContent", "doc": "&quot;Get a processed content, current by default&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getFullContent", "name": "MarkdownExtended\\MarkdownExtended::getFullContent", "doc": "&quot;Get a full version of a processed content, current by default&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getTemplater", "name": "MarkdownExtended\\MarkdownExtended::getTemplater", "doc": "&quot;Get current processed content in a Templater&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_load", "name": "MarkdownExtended\\MarkdownExtended::load", "doc": "&quot;Load a dependency&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_factory", "name": "MarkdownExtended\\MarkdownExtended::factory", "doc": "&quot;Build, retain and get a dependency instance&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_get", "name": "MarkdownExtended\\MarkdownExtended::get", "doc": "&quot;Get a loader object from registry \/ load it if absent&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getConfig", "name": "MarkdownExtended\\MarkdownExtended::getConfig", "doc": "&quot;Get a configuration entry from registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_setConfig", "name": "MarkdownExtended\\MarkdownExtended::setConfig", "doc": "&quot;Set a configuration entry in registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_addConfig", "name": "MarkdownExtended\\MarkdownExtended::addConfig", "doc": "&quot;Add to a configuration entry in registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_getVar", "name": "MarkdownExtended\\MarkdownExtended::getVar", "doc": "&quot;Get a parser entry from registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_setVar", "name": "MarkdownExtended\\MarkdownExtended::setVar", "doc": "&quot;Set a parser entry in registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_addVar", "name": "MarkdownExtended\\MarkdownExtended::addVar", "doc": "&quot;Add to a parser entry in registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\MarkdownExtended", "fromLink": "MarkdownExtended/MarkdownExtended.html", "link": "MarkdownExtended/MarkdownExtended.html#method_unsetVar", "name": "MarkdownExtended\\MarkdownExtended::unsetVar", "doc": "&quot;Unset a parser entry in registry&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/OutputFormatBag.html", "name": "MarkdownExtended\\OutputFormatBag", "doc": "&quot;PHP Markdown Extended OutputFormat container&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_load", "name": "MarkdownExtended\\OutputFormatBag::load", "doc": "&quot;Loads a new formatter&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_loadHelper", "name": "MarkdownExtended\\OutputFormatBag::loadHelper", "doc": "&quot;Loads a formatter helper if it exists&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method___call", "name": "MarkdownExtended\\OutputFormatBag::__call", "doc": "&quot;Magic method to pass any called method from the bag to its formatter&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_setFormatter", "name": "MarkdownExtended\\OutputFormatBag::setFormatter", "doc": "&quot;Set the current formatter&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_getFormatter", "name": "MarkdownExtended\\OutputFormatBag::getFormatter", "doc": "&quot;Get current formatter&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_setHelper", "name": "MarkdownExtended\\OutputFormatBag::setHelper", "doc": "&quot;Set the current formatter helper&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormatBag", "fromLink": "MarkdownExtended/OutputFormatBag.html", "link": "MarkdownExtended/OutputFormatBag.html#method_getHelper", "name": "MarkdownExtended\\OutputFormatBag::getHelper", "doc": "&quot;Get current formatter helper&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/AbstractOutputFormat.html", "name": "MarkdownExtended\\OutputFormat\\AbstractOutputFormat", "doc": "&quot;Class AbstractOutputFormat&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\AbstractOutputFormat", "fromLink": "MarkdownExtended/OutputFormat/AbstractOutputFormat.html", "link": "MarkdownExtended/OutputFormat/AbstractOutputFormat.html#method_buildTag", "name": "MarkdownExtended\\OutputFormat\\AbstractOutputFormat::buildTag", "doc": "&quot;This will try to call a method &lt;code&gt;build{TagName}()&lt;\/code&gt; if it exists, then will try to use\nthe object &lt;code&gt;$tags_map&lt;\/code&gt; static to automatically find what to do, and then call the\ndefault &lt;code&gt;getTagString()&lt;\/code&gt; method passing it the arguments.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\AbstractOutputFormat", "fromLink": "MarkdownExtended/OutputFormat/AbstractOutputFormat.html", "link": "MarkdownExtended/OutputFormat/AbstractOutputFormat.html#method_getTagString", "name": "MarkdownExtended\\OutputFormat\\AbstractOutputFormat::getTagString", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/DefaultHelper.html", "name": "MarkdownExtended\\OutputFormat\\DefaultHelper", "doc": "&quot;Default Markdown Extended output Helper&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\DefaultHelper", "fromLink": "MarkdownExtended/OutputFormat/DefaultHelper.html", "link": "MarkdownExtended/OutputFormat/DefaultHelper.html#method_getFullContent", "name": "MarkdownExtended\\OutputFormat\\DefaultHelper::getFullContent", "doc": "&quot;Get a complete version of parsed content, including metadata, body and notes&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\DefaultHelper", "fromLink": "MarkdownExtended/OutputFormat/DefaultHelper.html", "link": "MarkdownExtended/OutputFormat/DefaultHelper.html#method_getToc", "name": "MarkdownExtended\\OutputFormat\\DefaultHelper::getToc", "doc": "&quot;Build a hierarchical menu&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/HTML.html", "name": "MarkdownExtended\\OutputFormat\\HTML", "doc": "&quot;Format a content in full HTML&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method___construct", "name": "MarkdownExtended\\OutputFormat\\HTML::__construct", "doc": "&quot;Get the configuration &#039;empty&lt;em&gt;element&lt;\/em&gt;suffix&#039;&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_getTagString", "name": "MarkdownExtended\\OutputFormat\\HTML::getTagString", "doc": "&quot;Builder of HTML tags :\n    &amp;lt;TAG ATTR1=\&quot;ATTR_VAL1\&quot; .&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildTitle", "name": "MarkdownExtended\\OutputFormat\\HTML::buildTitle", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildMetaData", "name": "MarkdownExtended\\OutputFormat\\HTML::buildMetaData", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildComment", "name": "MarkdownExtended\\OutputFormat\\HTML::buildComment", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildParagraph", "name": "MarkdownExtended\\OutputFormat\\HTML::buildParagraph", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildLink", "name": "MarkdownExtended\\OutputFormat\\HTML::buildLink", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildMaths", "name": "MarkdownExtended\\OutputFormat\\HTML::buildMaths", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildMathsBlock", "name": "MarkdownExtended\\OutputFormat\\HTML::buildMathsBlock", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTML", "fromLink": "MarkdownExtended/OutputFormat/HTML.html", "link": "MarkdownExtended/OutputFormat/HTML.html#method_buildMathsSpan", "name": "MarkdownExtended\\OutputFormat\\HTML::buildMathsSpan", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/HTMLHelper.html", "name": "MarkdownExtended\\OutputFormat\\HTMLHelper", "doc": "&quot;HTML output Helper&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTMLHelper", "fromLink": "MarkdownExtended/OutputFormat/HTMLHelper.html", "link": "MarkdownExtended/OutputFormat/HTMLHelper.html#method_getFullContent", "name": "MarkdownExtended\\OutputFormat\\HTMLHelper::getFullContent", "doc": "&quot;Get a complete version of parsed content, including metadata, body and notes&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\HTMLHelper", "fromLink": "MarkdownExtended/OutputFormat/HTMLHelper.html", "link": "MarkdownExtended/OutputFormat/HTMLHelper.html#method_getToc", "name": "MarkdownExtended\\OutputFormat\\HTMLHelper::getToc", "doc": "&quot;Build a hierarchical menu&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/Man.html", "name": "MarkdownExtended\\OutputFormat\\Man", "doc": "&quot;Format a content in UNIX Manpage format&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method___construct", "name": "MarkdownExtended\\OutputFormat\\Man::__construct", "doc": "&quot;Remind some commons&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTag", "name": "MarkdownExtended\\OutputFormat\\Man::buildTag", "doc": "&quot;This will try to call a method &lt;code&gt;build{TagName}()&lt;\/code&gt; if it exists, then will try to use\nthe object &lt;code&gt;$tags_map&lt;\/code&gt; static to automatically find what to do, and then call the\ndefault &lt;code&gt;getTagString()&lt;\/code&gt; method passing it the arguments.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_getTagString", "name": "MarkdownExtended\\OutputFormat\\Man::getTagString", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_escapeString", "name": "MarkdownExtended\\OutputFormat\\Man::escapeString", "doc": "&quot;Escape a string ready for manpage output&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_trimString", "name": "MarkdownExtended\\OutputFormat\\Man::trimString", "doc": "&quot;Special &lt;code&gt;trim()&lt;\/code&gt; to actually trim and \&quot;r-trim\&quot; last EOL&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTitle", "name": "MarkdownExtended\\OutputFormat\\Man::buildTitle", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_indent", "name": "MarkdownExtended\\OutputFormat\\Man::indent", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_unindent", "name": "MarkdownExtended\\OutputFormat\\Man::unindent", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildMetaData", "name": "MarkdownExtended\\OutputFormat\\Man::buildMetaData", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildMetaTitle", "name": "MarkdownExtended\\OutputFormat\\Man::buildMetaTitle", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildParagraph", "name": "MarkdownExtended\\OutputFormat\\Man::buildParagraph", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildBold", "name": "MarkdownExtended\\OutputFormat\\Man::buildBold", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildItalic", "name": "MarkdownExtended\\OutputFormat\\Man::buildItalic", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildPreformatted", "name": "MarkdownExtended\\OutputFormat\\Man::buildPreformatted", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildCode", "name": "MarkdownExtended\\OutputFormat\\Man::buildCode", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildAbbreviation", "name": "MarkdownExtended\\OutputFormat\\Man::buildAbbreviation", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildDefinitionList", "name": "MarkdownExtended\\OutputFormat\\Man::buildDefinitionList", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildDefinitionListItemTerm", "name": "MarkdownExtended\\OutputFormat\\Man::buildDefinitionListItemTerm", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildDefinitionListItemDefinition", "name": "MarkdownExtended\\OutputFormat\\Man::buildDefinitionListItemDefinition", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildNewLine", "name": "MarkdownExtended\\OutputFormat\\Man::buildNewLine", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildHorizontalRule", "name": "MarkdownExtended\\OutputFormat\\Man::buildHorizontalRule", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildComment", "name": "MarkdownExtended\\OutputFormat\\Man::buildComment", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildListItem", "name": "MarkdownExtended\\OutputFormat\\Man::buildListItem", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildUnorderedListItem", "name": "MarkdownExtended\\OutputFormat\\Man::buildUnorderedListItem", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildOrderedListItem", "name": "MarkdownExtended\\OutputFormat\\Man::buildOrderedListItem", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildList", "name": "MarkdownExtended\\OutputFormat\\Man::buildList", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildUnorderedList", "name": "MarkdownExtended\\OutputFormat\\Man::buildUnorderedList", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildOrderedList", "name": "MarkdownExtended\\OutputFormat\\Man::buildOrderedList", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildLink", "name": "MarkdownExtended\\OutputFormat\\Man::buildLink", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildBlockquote", "name": "MarkdownExtended\\OutputFormat\\Man::buildBlockquote", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableCaption", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableCaption", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableBody", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableBody", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableHeader", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableHeader", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableFooter", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableFooter", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableLine", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableLine", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableCell", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableCell", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\Man", "fromLink": "MarkdownExtended/OutputFormat/Man.html", "link": "MarkdownExtended/OutputFormat/Man.html#method_buildTableCellHead", "name": "MarkdownExtended\\OutputFormat\\Man::buildTableCellHead", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\OutputFormat", "fromLink": "MarkdownExtended/OutputFormat.html", "link": "MarkdownExtended/OutputFormat/ManHelper.html", "name": "MarkdownExtended\\OutputFormat\\ManHelper", "doc": "&quot;Manpages Markdown Extended output Helper&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\ManHelper", "fromLink": "MarkdownExtended/OutputFormat/ManHelper.html", "link": "MarkdownExtended/OutputFormat/ManHelper.html#method_getFullContent", "name": "MarkdownExtended\\OutputFormat\\ManHelper::getFullContent", "doc": "&quot;Get a complete version of parsed content, including metadata, body and notes&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\OutputFormat\\ManHelper", "fromLink": "MarkdownExtended/OutputFormat/ManHelper.html", "link": "MarkdownExtended/OutputFormat/ManHelper.html#method_getToc", "name": "MarkdownExtended\\OutputFormat\\ManHelper::getToc", "doc": "&quot;Build a hierarchical menu&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Parser.html", "name": "MarkdownExtended\\Parser", "doc": "&quot;PHP Markdown Extended Parser Class&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Parser", "fromLink": "MarkdownExtended/Parser.html", "link": "MarkdownExtended/Parser.html#method___construct", "name": "MarkdownExtended\\Parser::__construct", "doc": "&quot;Constructor function: Initialize the parser object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Parser", "fromLink": "MarkdownExtended/Parser.html", "link": "MarkdownExtended/Parser.html#method_parse", "name": "MarkdownExtended\\Parser::parse", "doc": "&quot;Main function. Performs some pre-processing on the input text\nand pass it through the document gamut.&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Parser", "fromLink": "MarkdownExtended/Parser.html", "link": "MarkdownExtended/Parser.html#method_runGamuts", "name": "MarkdownExtended\\Parser::runGamuts", "doc": "&quot;Call to MarkdownExtended\\Grammar\\Gamut for an array of gamuts&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Parser", "fromLink": "MarkdownExtended/Parser.html", "link": "MarkdownExtended/Parser.html#method_getAllGamuts", "name": "MarkdownExtended\\Parser::getAllGamuts", "doc": "&quot;\n&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Registry.html", "name": "MarkdownExtended\\Registry", "doc": "&quot;Class Registry&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method___construct", "name": "MarkdownExtended\\Registry::__construct", "doc": "&quot;Initialize the registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_set", "name": "MarkdownExtended\\Registry::set", "doc": "&quot;Set or reset a new instance in global registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_add", "name": "MarkdownExtended\\Registry::add", "doc": "&quot;Add something to an existing entry of the global registry, the entry is created if it not exist&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_remove", "name": "MarkdownExtended\\Registry::remove", "doc": "&quot;Remove something to an existing entry of the global registry, the entry is created if it not exist&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_get", "name": "MarkdownExtended\\Registry::get", "doc": "&quot;Get an entry from the global registry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_extend", "name": "MarkdownExtended\\Registry::extend", "doc": "&quot;Extend a value with another, if types match&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Registry", "fromLink": "MarkdownExtended/Registry.html", "link": "MarkdownExtended/Registry.html#method_validateVarname", "name": "MarkdownExtended\\Registry::validateVarname", "doc": "&quot;Validate a var name&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended", "fromLink": "MarkdownExtended.html", "link": "MarkdownExtended/Templater.html", "name": "MarkdownExtended\\Templater", "doc": "&quot;Class Templater&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method___construct", "name": "MarkdownExtended\\Templater::__construct", "doc": "&quot;Construction of a new template object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method___toString", "name": "MarkdownExtended\\Templater::__toString", "doc": "&quot;Echoing the template object will force parsing and write result&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_load", "name": "MarkdownExtended\\Templater::load", "doc": "&quot;Load a content object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_loadCollection", "name": "MarkdownExtended\\Templater::loadCollection", "doc": "&quot;Load a contents collection object&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_getContent", "name": "MarkdownExtended\\Templater::getContent", "doc": "&quot;Get the current content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_getTemplate", "name": "MarkdownExtended\\Templater::getTemplate", "doc": "&quot;Get a template content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_buildTemplate", "name": "MarkdownExtended\\Templater::buildTemplate", "doc": "&quot;Build a template content passing it arguments&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_parse", "name": "MarkdownExtended\\Templater::parse", "doc": "&quot;Parse a content to complete it and pass it in a template if necessary&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_parseCollection", "name": "MarkdownExtended\\Templater::parseCollection", "doc": "&quot;Parse a contents collection to complete it and pass it in a template if necessary&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_parseContent", "name": "MarkdownExtended\\Templater::parseContent", "doc": "&quot;Parse a in-body tags&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_parseTemplate", "name": "MarkdownExtended\\Templater::parseTemplate", "doc": "&quot;Parse a template content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Templater", "fromLink": "MarkdownExtended/Templater.html", "link": "MarkdownExtended/Templater.html#method_autoInsert", "name": "MarkdownExtended\\Templater::autoInsert", "doc": "&quot;Insert tags from &#039;auto_insert&#039; config entry&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Util", "fromLink": "MarkdownExtended/Util.html", "link": "MarkdownExtended/Util/Compiler.html", "name": "MarkdownExtended\\Util\\Compiler", "doc": "&quot;The Compiler class compiles the whole markdown into a phar&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Util\\Compiler", "fromLink": "MarkdownExtended/Util/Compiler.html", "link": "MarkdownExtended/Util/Compiler.html#method_getDefaultFinder", "name": "MarkdownExtended\\Util\\Compiler::getDefaultFinder", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\Compiler", "fromLink": "MarkdownExtended/Util/Compiler.html", "link": "MarkdownExtended/Util/Compiler.html#method_compile", "name": "MarkdownExtended\\Util\\Compiler::compile", "doc": "&quot;Compiles app into a single phar file&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Util", "fromLink": "MarkdownExtended/Util.html", "link": "MarkdownExtended/Util/MenuItemIterator.html", "name": "MarkdownExtended\\Util\\MenuItemIterator", "doc": "&quot;This class defines each &lt;code&gt;RecursiveMenuIterator&lt;\/code&gt; item&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method___construct", "name": "MarkdownExtended\\Util\\MenuItemIterator::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_init", "name": "MarkdownExtended\\Util\\MenuItemIterator::init", "doc": "&quot;Initialize a new item with an array of values&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getDefault", "name": "MarkdownExtended\\Util\\MenuItemIterator::getDefault", "doc": "&quot;Get a default empty item&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_setLevel", "name": "MarkdownExtended\\Util\\MenuItemIterator::setLevel", "doc": "&quot;Set the item level&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getLevel", "name": "MarkdownExtended\\Util\\MenuItemIterator::getLevel", "doc": "&quot;Get the item level&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_setContent", "name": "MarkdownExtended\\Util\\MenuItemIterator::setContent", "doc": "&quot;Set the item content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getContent", "name": "MarkdownExtended\\Util\\MenuItemIterator::getContent", "doc": "&quot;Get the item content&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_setAttributes", "name": "MarkdownExtended\\Util\\MenuItemIterator::setAttributes", "doc": "&quot;Define the item attributes array&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_addAttribute", "name": "MarkdownExtended\\Util\\MenuItemIterator::addAttribute", "doc": "&quot;Add a new item attribute&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_hasAttributes", "name": "MarkdownExtended\\Util\\MenuItemIterator::hasAttributes", "doc": "&quot;Test if an item has one or more attribute&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getAttributes", "name": "MarkdownExtended\\Util\\MenuItemIterator::getAttributes", "doc": "&quot;Retrieve the item attributes array&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_setChildren", "name": "MarkdownExtended\\Util\\MenuItemIterator::setChildren", "doc": "&quot;Define an item children stack&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_addChild", "name": "MarkdownExtended\\Util\\MenuItemIterator::addChild", "doc": "&quot;Add a new item child&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_hasChildren", "name": "MarkdownExtended\\Util\\MenuItemIterator::hasChildren", "doc": "&quot;Test if the item has one or more children&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_hasChild", "name": "MarkdownExtended\\Util\\MenuItemIterator::hasChild", "doc": "&quot;Test if a child exists by its index&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getChildren", "name": "MarkdownExtended\\Util\\MenuItemIterator::getChildren", "doc": "&quot;Get the item children&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_getChild", "name": "MarkdownExtended\\Util\\MenuItemIterator::getChild", "doc": "&quot;Get a child by its index&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_offsetSet", "name": "MarkdownExtended\\Util\\MenuItemIterator::offsetSet", "doc": "&quot;Set a new value for a property if it exists in the class&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_offsetUnset", "name": "MarkdownExtended\\Util\\MenuItemIterator::offsetUnset", "doc": "&quot;Unset a property value if it exists in the class&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_offsetGet", "name": "MarkdownExtended\\Util\\MenuItemIterator::offsetGet", "doc": "&quot;Retrieve a property value if it exists in the class&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_offsetExists", "name": "MarkdownExtended\\Util\\MenuItemIterator::offsetExists", "doc": "&quot;Test if an index exists in the class and if the property is not empty&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\MenuItemIterator", "fromLink": "MarkdownExtended/Util/MenuItemIterator.html", "link": "MarkdownExtended/Util/MenuItemIterator.html#method_append", "name": "MarkdownExtended\\Util\\MenuItemIterator::append", "doc": "&quot;Append a new child to item children with a uniq item index&quot;"},
            
            {"type": "Class", "fromName": "MarkdownExtended\\Util", "fromLink": "MarkdownExtended/Util.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator", "doc": "&quot;Class RecursiveMenuIterator&quot;"},
                                                        {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method___construct", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::__construct", "doc": "&quot;\n&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_next", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::next", "doc": "&quot;Pass to next iteration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_previous", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::previous", "doc": "&quot;Back to previous iteration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_rewind", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::rewind", "doc": "&quot;Back to first iteration&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_seek", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::seek", "doc": "&quot;Seek to an iteration by its position&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_position", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::position", "doc": "&quot;Get the current iterator position&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_append", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::append", "doc": "&quot;Append a new value to iterator and then rebuild menu&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_getArrayCopy", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::getArrayCopy", "doc": "&quot;Get an array of the current menu&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_menuKeySet", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::menuKeySet", "doc": "&quot;Set a new key entry by its depth&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_menuOffsetSet", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::menuOffsetSet", "doc": "&quot;Define a new first level entry&quot;"},
                    {"type": "Method", "fromName": "MarkdownExtended\\Util\\RecursiveMenuIterator", "fromLink": "MarkdownExtended/Util/RecursiveMenuIterator.html", "link": "MarkdownExtended/Util/RecursiveMenuIterator.html#method_menuOffsetSetRecursive", "name": "MarkdownExtended\\Util\\RecursiveMenuIterator::menuOffsetSetRecursive", "doc": "&quot;Define a new entry recursively&quot;"},
            
            {"type": "Class", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MarkdownExtendedParser.html", "name": "markdown\\MarkdownExtendedParser", "doc": "&quot;Class MarkdownExtendedParser&quot;"},
                    
            {"type": "Class", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MarkdownExtraParser.html", "name": "markdown\\MarkdownExtraParser", "doc": "&quot;Class MarkdownExtraParser&quot;"},
                    
            {"type": "Class", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MarkdownParser.html", "name": "markdown\\MarkdownParser", "doc": "&quot;Class MarkdownParser&quot;"},
                                                        {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_render", "name": "markdown\\MarkdownParser::render", "doc": "&quot;Main function&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_transform", "name": "markdown\\MarkdownParser::transform", "doc": "&quot;Performs some preprocessing on the input text and pass it through the document gamut.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_transformMarkdown", "name": "markdown\\MarkdownParser::transformMarkdown", "doc": "&quot;Transform Markdown text to HTML.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_defaultTransform", "name": "markdown\\MarkdownParser::defaultTransform", "doc": "&quot;Initialize the parser and return the result of its transform method.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_text", "name": "markdown\\MarkdownParser::text", "doc": "&quot;Performs a text for both inline and blocks elements&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParser", "fromLink": "markdown/MarkdownParser.html", "link": "markdown/MarkdownParser.html#method_line", "name": "markdown\\MarkdownParser::line", "doc": "&quot;Performs a text with ONLY inline elements&quot;"},
            
            {"type": "Class", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MarkdownParserCompatibilityInterface.html", "name": "markdown\\MarkdownParserCompatibilityInterface", "doc": "&quot;Interface MarkdownParserCompatibilityInterface&quot;"},
                                                        {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_render", "name": "markdown\\MarkdownParserCompatibilityInterface::render", "doc": "&quot;Main function&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_transform", "name": "markdown\\MarkdownParserCompatibilityInterface::transform", "doc": "&quot;Performs some preprocessing on the input text and pass it through the document gamut.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_transformMarkdown", "name": "markdown\\MarkdownParserCompatibilityInterface::transformMarkdown", "doc": "&quot;Transform Markdown text to HTML.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_defaultTransform", "name": "markdown\\MarkdownParserCompatibilityInterface::defaultTransform", "doc": "&quot;Initialize the parser and return the result of its transform method.&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_text", "name": "markdown\\MarkdownParserCompatibilityInterface::text", "doc": "&quot;Performs a text for both inline and blocks elements&quot;"},
                    {"type": "Method", "fromName": "markdown\\MarkdownParserCompatibilityInterface", "fromLink": "markdown/MarkdownParserCompatibilityInterface.html", "link": "markdown/MarkdownParserCompatibilityInterface.html#method_line", "name": "markdown\\MarkdownParserCompatibilityInterface::line", "doc": "&quot;Performs a text with ONLY inline elements&quot;"},
            
            {"type": "Class", "fromName": "markdown", "fromLink": "markdown.html", "link": "markdown/MultiMarkdownParser.html", "name": "markdown\\MultiMarkdownParser", "doc": "&quot;Class MultiMarkdownParser&quot;"},
                    
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


